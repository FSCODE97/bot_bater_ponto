@client.command()
@commands.has_permissions(administrator=True)
async def ranking(ctx: commands.Context):
    crr = carregar_dados()
    totais_por_usuario = {}

    for k, v in crr.items():
        usuario = v.get('Usuario')
        tempo_total_str = v.get('Tempo total')

        if not usuario or not tempo_total_str:
            await ctx.send(f"Dados incompletos para o usuÃ¡rio {usuario}")
            continue

        try:
            tempo_total_obj = datetime.strptime(tempo_total_str, "%H:%M:%S") - datetime.strptime("00:00:00", "%H:%M:%S")
        except ValueError as e:
            await ctx.send(f"Erro ao converter tempo para o usuÃ¡rio {usuario}: {tempo_total_str}")
            continue

        if usuario in totais_por_usuario:
            totais_por_usuario[usuario] += tempo_total_obj
        else:
            totais_por_usuario[usuario] = tempo_total_obj

    # Ordenar o ranking por tempo total (do maior para o menor)
    ranking_ordenado = sorted(totais_por_usuario.items(), key=lambda x: x[1], reverse=True)

    # Criar Embed Discord para exibir o ranking
    emb = discord.Embed(title='Ranking de Tempo Total por UsuÃ¡rio')

    for posicao, (usuario, tempo_total_obj) in enumerate(ranking_ordenado, start=1):
        tempo_total_str = str(tempo_total_obj)
        emb.add_field(name=f'', value=f'> {posicao} {usuario}  ```{tempo_total_str}```', inline=True)
        emb.add_field(name=f'', value=f'\n', inline=False)
        emb.set_footer(text=f'Atenciosamente {ctx.guild.name} ðŸ˜„')
    await ctx.send(embed=emb)
